@page "/presenters/detail"
@page "/presenters/detail/{Id}"
@inject NavigationManager NavigationManager

<h1>New Presenter</h1>

<p>@VM.ValidationMessage</p>

<EditForm Model="@VM" OnSubmit="Submit">

    <div class="center">
        <MatTextField @bind-Value="@VM.Name" FullWidth="true"  Label="Name"></MatTextField>
    </div>
    <div class="center">
        <MatTextField Label="Description" FullWidth="true" id="description" @bind-Value="@VM.Description" />
    </div>

    <div class="center">
        <MatTextField id="name" FullWidth="true" Label="Image Url" @bind-Value="@VM.ImageUrl" />
    </div>
    <div class="center">
        <MatTextField id="name" FullWidth="true" Label="Github" @bind-Value="@VM.GithubUrl" />
    </div>
    <div class="center">
        <MatTextField id="name" FullWidth="true" Label="Twitter" @bind-Value="@VM.TwitterHandle" />
    </div>
    <div class="center">
        <MatTextField id="name" FullWidth="true" Label="Youtube" @bind-Value="@VM.YoutubeUrl" />
    </div>
    <div class="center">
        <MatTextField id="name" FullWidth="true" Label="Blog" @bind-Value="@VM.BlogUrl" />
    </div>
    <div class="center">
        <img src="@VM.ImageUrl" class="circle-image" />
    </div>

    <div class="center">
        <MatButton Raised="true" type="submit">Save</MatButton>
    </div>
</EditForm>

@code
{
    private ItemDetailViewModel VM = new ItemDetailViewModel();

    [Parameter]
    public string Id { get; set; }

    public async Task Submit()
    {
        var saved = await VM.Save();
        if (saved)
        {
            //navigate
            NavigationManager.NavigateTo("/presenters");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await VM.LoadPresenter(Id);
        StateHasChanged();
    }
}
